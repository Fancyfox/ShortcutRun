{
  "code": "import { Constants } from \"../Data/Constants\";\r\nimport GamePage from \"../script/Pages/GamePage\";\r\nimport AudioManager from \"../script/Singleton/AudioManager\";\r\nimport Pool from \"../script/Singleton/Pool\";\r\nimport Info from \"../script/UI/Info\";\r\nimport { PanelBase, UITYpes } from \"../script/UI/PanelBase\";\r\nimport RandomUtil from \"./RandomUtil\";\r\nexport class FlyCoin {\r\n    constructor(parent, count, startPos, prefab, endPos, cb) {\r\n        this.parent = parent;\r\n        this.count = count;\r\n        this.startPos = startPos;\r\n        this.prefab = prefab;\r\n        this.endPos = endPos;\r\n        this.cb = cb;\r\n    }\r\n    createEffect() {\r\n        return new Promise(resolve => {\r\n            let arr = [];\r\n            for (let i = 1; i <= this.count; i++) {\r\n                let dt = (400 / this.count) * i * Math.PI / 180, dx = this.startPos.x + RandomUtil.Random(150, 200) * Math.cos(dt), dy = this.startPos.y + RandomUtil.Random(150, 200) * Math.sin(dt), coinNode = Pool.getCoin(this.prefab, this.parent);\r\n                coinNode.active = true;\r\n                coinNode.x = this.startPos.x;\r\n                coinNode.y = this.startPos.y;\r\n                coinNode.visible = true;\r\n                coinNode.scale(0.65, 0.65);\r\n                let time1 = RandomUtil.Random(0.2, 0.5) / 1.5, time2 = RandomUtil.Random(0.8, 1.1) / 1.5;\r\n                arr.push(new Promise(resolve2 => {\r\n                    Laya.Tween.to(coinNode, { x: dx, y: dy }, time1 * 1000, null, Laya.Handler.create(this, () => {\r\n                        Laya.Tween.to(coinNode, { x: this.endPos.x, y: this.endPos.y }, time2 * 1000, Laya.Ease.cubicIn, Laya.Handler.create(this, () => {\r\n                            if (this.count % 2 == 0) {\r\n                                AudioManager.instance().playEffect(\"Reward\");\r\n                            }\r\n                            coinNode.scale(0.9, 0.9);\r\n                            Laya.Tween.to(coinNode, { scaleX: 1, scaleY: 1 }, 50, null, Laya.Handler.create(this, () => {\r\n                                Laya.Tween.to(coinNode, { scaleX: 0.9, scaleY: 0.9 }, 50, null, Laya.Handler.create(this, () => {\r\n                                    Pool.putCoin(coinNode);\r\n                                    resolve2();\r\n                                }));\r\n                            }));\r\n                        }));\r\n                    }));\r\n                }));\r\n            }\r\n            Promise.all(arr).then(() => {\r\n                if (this.cb)\r\n                    this.cb();\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}\r\nexport var FlyEffectType;\r\n(function (FlyEffectType) {\r\n    FlyEffectType[FlyEffectType[\"Coin\"] = 1] = \"Coin\";\r\n    FlyEffectType[FlyEffectType[\"Heat\"] = 2] = \"Heat\";\r\n    FlyEffectType[FlyEffectType[\"Micro\"] = 3] = \"Micro\";\r\n    FlyEffectType[FlyEffectType[\"DropCoin\"] = 4] = \"DropCoin\";\r\n})(FlyEffectType || (FlyEffectType = {}));\r\nexport default class CoinFlyEffect extends PanelBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = UITYpes.EFFECT;\r\n        this._effectCount = 0;\r\n    }\r\n    show(start, callback, count, coin) {\r\n        let call = callback;\r\n        let num = count;\r\n        this.CreateMultiplyFlyEffect(num, start, call, coin);\r\n    }\r\n    hide() {\r\n    }\r\n    CreateMultiplyFlyEffect(num, startPos, cb = null, coinPrefab) {\r\n        this._effectCount++;\r\n        let endPos = Info.instance.getCoinInfoPos();\r\n        let parent = this.owner.getChildAt(0);\r\n        this.effect = new FlyCoin(parent, num, startPos, coinPrefab, endPos, cb);\r\n        this.effect.createEffect().then(() => {\r\n            this._effectCount--;\r\n            if (this._effectCount <= 0) {\r\n                GamePage.instance.hidePage(Constants.UIPage.coinEffect);\r\n                this._effectCount = 0;\r\n            }\r\n        });\r\n    }\r\n    getRandom(min = 0, max = 1) {\r\n        return min + (max - min) * Math.random();\r\n    }\r\n}\r\n",
  "references": [
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Data/Constants.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Extensions/Mathf.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Pages/GamePage.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/AudioManager.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/Pool.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/UI/Info.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/UI/PanelBase.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Util/RandomUtil.ts"
  ]
}
