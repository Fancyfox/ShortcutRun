{
  "code": "import { MiniGameManager } from \"../Data/MiniGameManager\";\r\nimport AudioManager from \"../script/Singleton/AudioManager\";\r\nimport EffectUtil from \"../script/Singleton/EffectUtil\";\r\nimport EventManager from \"../script/Singleton/EventManager\";\r\nimport GameData from \"../script/Singleton/GameData\";\r\nimport GameDefine, { CharacterAnimation, EventName, GameState } from \"../script/Singleton/GameDefine\";\r\nimport Pool from \"../script/Singleton/Pool\";\r\nimport { ShopManager } from \"../script/Singleton/ShopManager\";\r\nimport { StaticDataManager } from \"../Tmpl/StaticDataManager\";\r\nimport RandomUtil from \"../Util/RandomUtil\";\r\nimport { SdkUitl } from \"../Util/SdkUitl\";\r\nimport Camera from \"./Camera\";\r\nimport Charactor from \"./Charactor\";\r\nexport default class Player extends Charactor {\r\n    constructor() {\r\n        super();\r\n        this._rotate_speed = 0.35;\r\n        this.fingerMoveDistance_x = 0;\r\n        this.isMouseDown = false;\r\n        this._canPop = true;\r\n        this._isMoveArrival = false;\r\n    }\r\n    onAwake() {\r\n        super.onAwake();\r\n        this.player = this.owner;\r\n        this._point = this.player.getChildByName(\"point\");\r\n        this.blank_point = this.player.getChildByName(\"plank_point\");\r\n        this.animator = this.player.getComponent(Laya.Animator);\r\n        this.playerMove = new Laya.Vector3(0, 0, this.forward_speed);\r\n        this.curFrameTouchPoint_x = 0;\r\n        this.lastFrameTouchPoint_x = 0;\r\n        this.playerRotate = new Laya.Vector3(0, this._rotate_speed, 0);\r\n        Laya.stage.on(Laya.Event.MOUSE_DOWN, this, this.mouseDown);\r\n        Laya.stage.on(Laya.Event.MOUSE_MOVE, this, this.mouseMove);\r\n        Laya.stage.on(Laya.Event.MOUSE_UP, this, this.mouseUp);\r\n        this.moveArrivalpointHandler = new Laya.Handler(this, this.moveArrivalpointCallback);\r\n    }\r\n    onStart() {\r\n        super.onStart();\r\n        this.initRay();\r\n        this.playerInfo = {\r\n            name: \"ä½ \",\r\n            rank: 1,\r\n            player: true\r\n        };\r\n        GameData.playerInfos.push(this.playerInfo);\r\n    }\r\n    onEnable() {\r\n        EventManager.register(EventName.MINI_GAME_START, this.onGameStart, this);\r\n        EventManager.register(EventName.MINI_GAME_END, this.onGameEnd, this);\r\n        EventManager.register(EventName.PLAYER_RELIFE, this.relifeCallback, this);\r\n    }\r\n    onDisable() {\r\n        EventManager.unRegister(EventName.MINI_GAME_START, this.onGameStart, this);\r\n        EventManager.unRegister(EventName.MINI_GAME_END, this.onGameEnd, this);\r\n        EventManager.unRegister(EventName.PLAYER_RELIFE, this.relifeCallback, this);\r\n    }\r\n    mouseDown() {\r\n        if (GameDefine.gameState != GameState.Playing) {\r\n            return;\r\n        }\r\n        if (this.isMouseDown) {\r\n            return;\r\n        }\r\n        this.isMouseDown = true;\r\n        this.curFrameTouchPoint_x = Laya.MouseManager.instance.mouseX;\r\n        this.lastFrameTouchPoint_x = Laya.MouseManager.instance.mouseX;\r\n    }\r\n    mouseMove() {\r\n        if (GameDefine.gameState != GameState.Playing) {\r\n            return;\r\n        }\r\n        if (!this.isMouseDown) {\r\n            return;\r\n        }\r\n        this.curFrameTouchPoint_x = Laya.MouseManager.instance.mouseX;\r\n        this.fingerMoveDistance_x = this.curFrameTouchPoint_x - this.lastFrameTouchPoint_x;\r\n        if (this.fingerMoveDistance_x > 0) {\r\n            this.playerRotate.setValue(0, -this._rotate_speed * Laya.timer.delta / 1000 * this.fingerMoveDistance_x, 0);\r\n            this.player.transform.rotate(this.playerRotate, true);\r\n        }\r\n        else if (this.fingerMoveDistance_x < 0) {\r\n            this.playerRotate.setValue(0, -this._rotate_speed * Laya.timer.delta / 1000 * this.fingerMoveDistance_x, 0);\r\n            this.player.transform.rotate(this.playerRotate, true);\r\n        }\r\n        this.lastFrameTouchPoint_x = this.curFrameTouchPoint_x;\r\n    }\r\n    mouseUp() {\r\n        if (GameDefine.gameState != GameState.Playing) {\r\n            return;\r\n        }\r\n        if (this.isMouseDown) {\r\n            this.isMouseDown = false;\r\n        }\r\n    }\r\n    onUpdate() {\r\n        if (Laya.timer.delta > 100) {\r\n            return;\r\n        }\r\n        if (GameDefine.gameState != GameState.Playing) {\r\n            return;\r\n        }\r\n        this.rayCast();\r\n        switch (this.animationState) {\r\n            case CharacterAnimation.Planche:\r\n                this._moveForward();\r\n                if (this.player.transform.localPositionY < 0) {\r\n                    this.player.transform.localPositionY = 0;\r\n                }\r\n                break;\r\n            case CharacterAnimation.Carrying:\r\n            case CharacterAnimation.Running:\r\n                this._moveForward();\r\n                if (this.player.transform.localPositionY < 0) {\r\n                    this.player.transform.localPositionY = 0;\r\n                }\r\n                break;\r\n            case CharacterAnimation.Jump:\r\n                this.playerMove.y -= this._decreaseDownspeed();\r\n                this._moveForward();\r\n                if (this.juageWaterDistance()) {\r\n                    AudioManager.instance().playEffect(\"FallInWater\");\r\n                    let pos = new Laya.Vector3(this.player.transform.position.x, -0.5, this.player.transform.position.z);\r\n                    EffectUtil.instance.loadEffect(\"fallEffect\", -1, pos).then(res => {\r\n                        res.active = true;\r\n                    });\r\n                    if (GameData.canRelife) {\r\n                        GameData.canRelife = false;\r\n                        MiniGameManager.instance().PauseGame();\r\n                    }\r\n                    else {\r\n                        MiniGameManager.instance().DieGame();\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    init(data) {\r\n        super.init(data);\r\n        Camera.instance.initPlayerData(this.player, this._point);\r\n        this.changePlayerState(CharacterAnimation.Idel);\r\n        this.cube_count = 0;\r\n        this._canPop = true;\r\n    }\r\n    initCamera(camera) {\r\n        this._camera = camera;\r\n        this.player = this.owner;\r\n        this.player.addChild(camera);\r\n        let point = this.player.getChildByName(\"point\");\r\n        this._camera.transform.position = point.transform.position;\r\n        this._camera.transform.lookAt(this.player.transform.position, Laya.Vector3.up);\r\n    }\r\n    _moveForward() {\r\n        this.player.transform.translate(this.playerMove, true);\r\n    }\r\n    _decreaseDownspeed() {\r\n        return Laya.timer.delta / 1000 * 0.8;\r\n    }\r\n    changePlayerState(state) {\r\n        if (this.animationState == state) {\r\n            return;\r\n        }\r\n        this._playAnimation(state);\r\n        switch (state) {\r\n            case CharacterAnimation.Planche:\r\n            case CharacterAnimation.Carrying:\r\n            case CharacterAnimation.Running:\r\n                this.playerMove.setValue(0, 0, this.forward_speed);\r\n                break;\r\n            case CharacterAnimation.Jump:\r\n                this.playerMove.setValue(0, this.down_speed, this.forward_speed);\r\n                break;\r\n            case CharacterAnimation.Idel:\r\n                this.playerMove.setValue(0, 0, 0);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    _playAnimation(state) {\r\n        this.animationState = state;\r\n        if (state == CharacterAnimation.Planche) {\r\n            this.animator.speed = 1.5;\r\n        }\r\n        else {\r\n            this.animator.speed = 1;\r\n        }\r\n        this.animator.play(state);\r\n    }\r\n    onGameStart() {\r\n        this.setHandPrefab();\r\n        this.changePlayerState(CharacterAnimation.Running);\r\n        this.startRay();\r\n    }\r\n    onGameEnd() {\r\n        this.changePlayerState(CharacterAnimation.Falling);\r\n    }\r\n    initRay() {\r\n        this.ray_orign = this.player.transform.position.clone();\r\n        this.ray_down = new Laya.Ray(this.ray_orign, Laya.Vector3.down);\r\n        this.outInfo = new Laya.HitResult();\r\n    }\r\n    startRay() {\r\n        this.isRayCast = true;\r\n    }\r\n    rayCast() {\r\n        if (!this.physicsSimulation) {\r\n            return;\r\n        }\r\n        if (!this.isRayCast) {\r\n            return;\r\n        }\r\n        let pos = this.player.transform.position;\r\n        this.ray_orign.setValue(pos.x, pos.y + 5, pos.z);\r\n        if (this.physicsSimulation.rayCast(this.ray_down, this.outInfo, 20)) {\r\n            this.refeshState(this.outInfo, this.animationState);\r\n        }\r\n    }\r\n    refeshState(outInfo, state) {\r\n        if (!outInfo || !outInfo.succeeded) {\r\n            return;\r\n        }\r\n        let colliderName = this.outInfo.collider.owner.name;\r\n        if (GameData.canRelife) {\r\n            switch (colliderName) {\r\n                case \"Turn_45_L\":\r\n                case \"Turn_45_R\":\r\n                case \"Turn_45_short_L\":\r\n                case \"Turn_45_short_R\":\r\n                case \"Cylinder\":\r\n                case \"Stright\":\r\n                    let part = this.outInfo.collider.owner;\r\n                    this.setRelifePart(part);\r\n                    break;\r\n            }\r\n        }\r\n        let point = outInfo.point;\r\n        switch (state) {\r\n            case CharacterAnimation.Planche:\r\n                switch (colliderName) {\r\n                    case \"arrival\":\r\n                        this._moveArrivalPoint(this.outInfo.collider.owner);\r\n                        break;\r\n                    case \"water\":\r\n                        if (this.cube_count > 0) {\r\n                            console.log(\"pop blank\");\r\n                            this._popPlankToRoad();\r\n                            this.changePlayerState(CharacterAnimation.Planche);\r\n                        }\r\n                        else {\r\n                            this.changePlayerState(CharacterAnimation.Jump);\r\n                            AudioManager.instance().playEffect(\"Jump\");\r\n                        }\r\n                        break;\r\n                    case \"Turn_45_L\":\r\n                    case \"Turn_45_R\":\r\n                    case \"Turn_45_short_L\":\r\n                    case \"Turn_45_short_R\":\r\n                    case \"Cylinder\":\r\n                    case \"Stright\":\r\n                    case \"plank\":\r\n                        if (this.cube_count > 0) {\r\n                            this.changePlayerState(CharacterAnimation.Carrying);\r\n                        }\r\n                        else {\r\n                            this.changePlayerState(CharacterAnimation.Running);\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case CharacterAnimation.Carrying:\r\n            case CharacterAnimation.Running:\r\n                switch (colliderName) {\r\n                    case \"arrival\":\r\n                        this._moveArrivalPoint(this.outInfo.collider.owner);\r\n                        break;\r\n                    case \"water\":\r\n                        if (this.cube_count > 0) {\r\n                            this._popPlankToRoad();\r\n                            this.changePlayerState(CharacterAnimation.Planche);\r\n                        }\r\n                        else {\r\n                            this.changePlayerState(CharacterAnimation.Jump);\r\n                            AudioManager.instance().playEffect(\"Jump\");\r\n                        }\r\n                        break;\r\n                    case \"plank\":\r\n                        console.log(\"plank\");\r\n                        this._addPlankToPlayer();\r\n                        this.changePlayerState(CharacterAnimation.Carrying);\r\n                        let plank = outInfo.collider.owner;\r\n                        plank.removeSelf();\r\n                        break;\r\n                }\r\n                break;\r\n            case CharacterAnimation.Jump:\r\n                switch (colliderName) {\r\n                    case \"arrvial\":\r\n                        if (this.juageRoadDistance()) {\r\n                            if (this.player.transform.localPositionY < 0) {\r\n                                this.player.transform.localPositionY = 0;\r\n                            }\r\n                            this._moveArrivalPoint(this.outInfo.collider.owner);\r\n                        }\r\n                        break;\r\n                    case \"plank\":\r\n                    case \"Turn_45_L\":\r\n                    case \"Turn_45_R\":\r\n                    case \"Turn_45_short_L\":\r\n                    case \"Turn_45_short_R\":\r\n                    case \"Cylinder\":\r\n                    case \"Stright\":\r\n                        if (this.juageRoadDistance()) {\r\n                            this.changePlayerState(CharacterAnimation.Running);\r\n                            if (this.player.transform.localPositionY < 0) {\r\n                                this.player.transform.localPositionY = 0;\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        if (colliderName.substring(0, 10) == \"plank_hand\") {\r\n                            if (this.juageBlankDistance(point)) {\r\n                                console.log(\"judge blank road\");\r\n                                this.changePlayerState(CharacterAnimation.Running);\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    juageWaterDistance() {\r\n        return this.player.transform.localPositionY <= -2.3;\r\n    }\r\n    juageRoadDistance() {\r\n        return this.player.transform.localPositionY <= 0;\r\n    }\r\n    juageBlankDistance(point) {\r\n        let distance_y = this.player.transform.localPositionY - point.y;\r\n        return distance_y <= 0.05;\r\n    }\r\n    _addPlankToPlayer() {\r\n        this.cube_count++;\r\n        let pos = new Laya.Vector3();\r\n        if (this.cube_array.length > 0) {\r\n            let lastcube = this.cube_array[this.cube_array.length - 1];\r\n            pos.setValue(lastcube.transform.position.x, lastcube.transform.position.y + this.cube_height, lastcube.transform.position.z);\r\n        }\r\n        else {\r\n            pos = this.blank_point.transform.position.clone();\r\n        }\r\n        let cube = Pool.Spawn(this._plank_prefab, this.blank_point, pos);\r\n        let animator = cube.getComponent(Laya.Animator);\r\n        animator.enabled = true;\r\n        animator.play(\"blank_push\");\r\n        let coll = cube.getComponent(Laya.PhysicsCollider);\r\n        coll.enabled = false;\r\n        let target_y = cube.transform.localPositionY + 0.2;\r\n        Laya.Tween.from(cube.transform, { localPositionY: target_y }, 0.6);\r\n        cube.transform.rotation = this.blank_point.transform.rotation;\r\n        this.cube_array.push(cube);\r\n        AudioManager.instance().playEffect(\"Collect\");\r\n        SdkUitl.vibrateShort();\r\n    }\r\n    _popPlankToRoad() {\r\n        if (!this._canPop) {\r\n            return;\r\n        }\r\n        if (this.cube_array.length <= 0) {\r\n            return;\r\n        }\r\n        let cube = this.cube_array.pop();\r\n        this.cube_count--;\r\n        Pool.RecycleObj(cube, this._plank_prefab);\r\n        let plankRoad = Pool.Spawn(this._plank_prefab, GameData.map, this.player.transform.position.clone());\r\n        plankRoad.transform.rotation = this.player.transform.rotation.clone();\r\n        plankRoad.transform.setWorldLossyScale(Laya.Vector3.one);\r\n        let animator = plankRoad.getComponent(Laya.Animator);\r\n        animator.enabled = false;\r\n        let coll = plankRoad.getComponent(Laya.PhysicsCollider);\r\n        coll.enabled = true;\r\n        this._canPop = false;\r\n        Laya.timer.once(200, this, () => {\r\n            this._canPop = true;\r\n        });\r\n        AudioManager.instance().playEffect(\"Put\");\r\n        SdkUitl.vibrateShort();\r\n    }\r\n    _clearPlank() {\r\n        Laya.timer.frameLoop(1, this.player, () => {\r\n            if (this.cube_array.length <= 0) {\r\n                Laya.timer.clearAll(this.player);\r\n                return;\r\n            }\r\n            let cube = this.cube_array.pop();\r\n            this.cube_count--;\r\n            Pool.RecycleObj(cube, this._plank_prefab);\r\n        });\r\n    }\r\n    _throwPlank(cb) {\r\n        if (this.cube_array.length < 0) {\r\n            cb && cb();\r\n            return;\r\n        }\r\n        this.cube_array.map((cube, index) => {\r\n            let target_x = RandomUtil.Random(-5, 5);\r\n            let target_z = RandomUtil.Random(3, 10);\r\n            Laya.Tween.to(cube.transform, { localPositionX: target_x / 2, localPositionY: RandomUtil.Random(3, 5), localPositionZ: target_z / 2 }, 500, Laya.Ease.quadIn, Laya.Handler.create(this, () => {\r\n                Laya.Tween.to(cube.transform, { localPositionX: target_x, localPositionY: 0, localPositionZ: target_z }, 500, Laya.Ease.quadIn, Laya.Handler.create(this, () => {\r\n                    if (index === this.cube_array.length - 1) {\r\n                        cb && cb();\r\n                    }\r\n                }));\r\n            }));\r\n        });\r\n    }\r\n    _moveArrivalPoint(arrival) {\r\n        if (this._isMoveArrival) {\r\n            return;\r\n        }\r\n        if (!arrival) {\r\n            return;\r\n        }\r\n        this._throwPlank(() => {\r\n            this._clearPlank();\r\n        });\r\n        this.changePlayerState(CharacterAnimation.Running);\r\n        let pos = GameData.getArrivalPos();\r\n        this.player.transform.lookAt(pos, Laya.Vector3.up, false, false);\r\n        this._isMoveArrival = true;\r\n        this._clearMoveTween();\r\n        this.charactor_tween.to(this.player.transform, { localPositionX: pos.x, localPositionZ: pos.z }, 500, null, this.moveArrivalpointHandler);\r\n    }\r\n    _clearMoveTween() {\r\n        this.charactor_tween.clear();\r\n    }\r\n    moveArrivalpointCallback() {\r\n        if (GameDefine.gameState == GameState.End) {\r\n            return;\r\n        }\r\n        this.playerInfo.rank = GameData.rank;\r\n        GameData.playRank = this.playerInfo.rank;\r\n        GameData.rank++;\r\n        MiniGameManager.instance().EndGame();\r\n        if (this.playerInfo.rank === 1) {\r\n            AudioManager.instance().playEffect(\"Win\");\r\n            this.changePlayerState(CharacterAnimation.Dance);\r\n        }\r\n        else {\r\n            AudioManager.instance().playEffect(\"Fail\");\r\n            this.changePlayerState(CharacterAnimation.Defeated);\r\n        }\r\n    }\r\n    setRelifePart(part) {\r\n        if (!this._relifePart) {\r\n            this._relifePart = part;\r\n            return;\r\n        }\r\n        if (this._relifePart != part) {\r\n            this._relifePart = part;\r\n        }\r\n    }\r\n    relifeCallback() {\r\n        if (this._relifePart) {\r\n            let relifePos = this._relifePart.transform.position.clone();\r\n            this.player.transform.position = new Laya.Vector3(relifePos.x, 0, relifePos.z);\r\n            let target = this._relifePart.getChildAt(0);\r\n            this.player.transform.lookAt(target.transform.position.clone(), Laya.Vector3.up, false, false);\r\n            MiniGameManager.instance().ResumeGame();\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    setHandPrefab() {\r\n        let id = ShopManager.instance().getChoosePlankID();\r\n        let tmpl = StaticDataManager.getPlanksRecord(id);\r\n        this._plank_prefab = tmpl.Prefab;\r\n    }\r\n}\r\n",
  "references": [
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Data/Constants.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Data/MiniGameManager.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Extensions/Vector3.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Pages/GamePage.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/AudioManager.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/EffectUtil.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/EventManager.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/GameData.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/GameDefine.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/Pool.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/ShopManager.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Tmpl/StaticDataManager.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Util/RandomUtil.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Util/SdkUitl.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Entity/Camera.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Entity/Charactor.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Entity/Obj.ts"
  ]
}
