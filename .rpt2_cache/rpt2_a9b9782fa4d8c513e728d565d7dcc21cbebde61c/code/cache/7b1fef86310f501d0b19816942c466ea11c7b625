{
  "code": "import EffectUtil from \"../script/Singleton/EffectUtil\";\r\nimport EventManager from \"../script/Singleton/EventManager\";\r\nimport GameData from \"../script/Singleton/GameData\";\r\nimport GameDefine, { CharacterAnimation, EventName, GameState } from \"../script/Singleton/GameDefine\";\r\nimport Pool from \"../script/Singleton/Pool\";\r\nimport RandomUtil from \"../Util/RandomUtil\";\r\nimport Charactor from \"./Charactor\";\r\nexport default class Enemy extends Charactor {\r\n    constructor() {\r\n        super();\r\n        this._canPop = true;\r\n        this._rotate_speed = 4;\r\n        this._isMoveArrival = false;\r\n        this._die = false;\r\n        this._toArrival = false;\r\n        this._final = false;\r\n        this._toRight = false;\r\n        this.qua = new Laya.Quaternion();\r\n    }\r\n    onAwake() {\r\n        super.onAwake();\r\n        this.player = this.owner;\r\n        this.animator = this.player.getComponent(Laya.Animator);\r\n        this.blank_point = this.player.getChildByName(\"plank_point\");\r\n        this._left = this.player.getChildByName(\"left\");\r\n        this._right = this.player.getChildByName(\"right\");\r\n        this.playerMove = new Laya.Vector3(0, 0, this.forward_speed);\r\n        this.playerRotate = new Laya.Vector3(0, this._rotate_speed, 0);\r\n        this._point = this.player.getChildByName(\"point\");\r\n        this.moveArrivalpointHandler = new Laya.Handler(this, this.moveArrivalpointCallback);\r\n    }\r\n    onStart() {\r\n        super.onStart();\r\n        this.initRay();\r\n        this.playerInfo = {\r\n            name: GameData.getName(),\r\n            rank: 1,\r\n            player: false\r\n        };\r\n        GameData.playerInfos.push(this.playerInfo);\r\n    }\r\n    onEnable() {\r\n        EventManager.register(EventName.MINI_GAME_START, this.onGameStart, this);\r\n        EventManager.register(EventName.MINI_GAME_END, this.onGameEnd, this);\r\n    }\r\n    onDisable() {\r\n        EventManager.unRegister(EventName.MINI_GAME_START, this.onGameStart, this);\r\n        EventManager.unRegister(EventName.MINI_GAME_END, this.onGameEnd, this);\r\n    }\r\n    init(data) {\r\n        super.init(data);\r\n        this.changePlayerState(CharacterAnimation.Idel);\r\n        this.cube_count = 0;\r\n        this._canPop = true;\r\n        this._die = false;\r\n        this._toArrival = false;\r\n        this._final = false;\r\n    }\r\n    onUpdate() {\r\n        if (Laya.timer.delta > 100) {\r\n            return;\r\n        }\r\n        if (GameDefine.gameState == GameState.None || GameDefine.gameState == GameState.Ready) {\r\n            return;\r\n        }\r\n        if (this._die) {\r\n            return;\r\n        }\r\n        if (this._final) {\r\n            return;\r\n        }\r\n        this.rayCast();\r\n        switch (this.animationState) {\r\n            case CharacterAnimation.Planche:\r\n            case CharacterAnimation.Carrying:\r\n            case CharacterAnimation.Running:\r\n                this._moveForward();\r\n                if (this.player.transform.localPositionY < 0) {\r\n                    this.player.transform.localPositionY = 0;\r\n                }\r\n                break;\r\n            case CharacterAnimation.Jump:\r\n                this.playerMove.y -= this._decreaseDownspeed();\r\n                this._moveForward();\r\n                if (this.juageWaterDistance()) {\r\n                    this.enemyDie();\r\n                    let pos = new Laya.Vector3(this.player.transform.position.x, -0.5, this.player.transform.position.z);\r\n                    EffectUtil.instance.loadEffect(\"fallEffect\", -1, pos).then(res => {\r\n                        res.active = true;\r\n                    });\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    enemyDie() {\r\n        if (!this._die) {\r\n            this._die = true;\r\n        }\r\n    }\r\n    onGameStart() {\r\n        this.changePlayerState(CharacterAnimation.Running);\r\n        this.startRay();\r\n    }\r\n    onGameEnd() {\r\n        this.playerInfo.rank = GameData.rank;\r\n        GameData.rank++;\r\n    }\r\n    startRay() {\r\n        this.isRayCast = true;\r\n    }\r\n    initRay() {\r\n        this.ray_orign = this.player.transform.position.clone();\r\n        this.ray_down = new Laya.Ray(this.ray_orign, Laya.Vector3.down);\r\n        this.outInfo = new Laya.HitResult();\r\n        this.ray_left_orign = this._left.transform.position.clone();\r\n        this.ray_left_down = new Laya.Ray(this.ray_left_orign, Laya.Vector3.down);\r\n        this.outInfo_left = new Laya.HitResult();\r\n        this.ray_right_orign = this._right.transform.position.clone();\r\n        this.ray_right_down = new Laya.Ray(this.ray_right_orign, Laya.Vector3.down);\r\n        this.outInfo_right = new Laya.HitResult();\r\n    }\r\n    rayCast() {\r\n        if (!this.physicsSimulation) {\r\n            return;\r\n        }\r\n        if (!this.isRayCast) {\r\n            return;\r\n        }\r\n        let pos = this.player.transform.position;\r\n        this.ray_orign.setValue(pos.x, pos.y + 5, pos.z);\r\n        if (this.physicsSimulation.rayCast(this.ray_down, this.outInfo, 20)) {\r\n            this.refreshState(this.outInfo, this.animationState);\r\n        }\r\n        if (this._toArrival) {\r\n            this.player.transform.lookAt(GameData.arrival_pos, Laya.Vector3.up, false, false);\r\n            return;\r\n        }\r\n        if (this._toRight) {\r\n            this._toRight = false;\r\n            this._rotateToRight();\r\n        }\r\n        if (this.rayLeftCast() && this.rayRigtCast()) {\r\n            return;\r\n        }\r\n        if (this.rayLeftCast()) {\r\n            this._rotate(-1);\r\n            return;\r\n        }\r\n        if (this.rayRigtCast()) {\r\n            this._rotate(1);\r\n            return;\r\n        }\r\n    }\r\n    refreshState(outInfo, state) {\r\n        if (!outInfo || !outInfo.succeeded) {\r\n            return;\r\n        }\r\n        let colliderName = this.outInfo.collider.owner.name;\r\n        let point = outInfo.point;\r\n        switch (state) {\r\n            case CharacterAnimation.Planche:\r\n                switch (colliderName) {\r\n                    case \"arrival\":\r\n                        this._moveArrivalPoint(this.outInfo.collider.owner);\r\n                        break;\r\n                    case \"water\":\r\n                        if (this.cube_count > 0) {\r\n                            this._popPlankToRoad();\r\n                            this.changePlayerState(CharacterAnimation.Planche);\r\n                        }\r\n                        else {\r\n                            this.changePlayerState(CharacterAnimation.Jump);\r\n                        }\r\n                        break;\r\n                    case \"Turn_45_L\":\r\n                    case \"Turn_45_R\":\r\n                    case \"Turn_45_short_L\":\r\n                    case \"Turn_45_short_R\":\r\n                    case \"plank\":\r\n                        if (this._toArrival) {\r\n                            this._toArrival = false;\r\n                        }\r\n                        if (!this._toRight) {\r\n                            this._toRight = true;\r\n                            this._part = this.outInfo.collider.owner;\r\n                        }\r\n                        if (this.cube_count > 0) {\r\n                            this.changePlayerState(CharacterAnimation.Carrying);\r\n                        }\r\n                        else {\r\n                            this.changePlayerState(CharacterAnimation.Running);\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case CharacterAnimation.Carrying:\r\n            case CharacterAnimation.Running:\r\n                switch (colliderName) {\r\n                    case \"arrival\":\r\n                        this._moveArrivalPoint(this.outInfo.collider.owner);\r\n                        break;\r\n                    case \"water\":\r\n                        if (this.cube_count > 0) {\r\n                            this._popPlankToRoad();\r\n                            this.changePlayerState(CharacterAnimation.Planche);\r\n                        }\r\n                        else {\r\n                            this.changePlayerState(CharacterAnimation.Jump);\r\n                        }\r\n                        break;\r\n                    case \"plank\":\r\n                        this._addPlankToEnemy();\r\n                        this.changePlayerState(CharacterAnimation.Carrying);\r\n                        let plank = outInfo.collider.owner;\r\n                        plank.removeSelf();\r\n                        break;\r\n                }\r\n                break;\r\n            case CharacterAnimation.Jump:\r\n                switch (colliderName) {\r\n                    case \"arrvial\":\r\n                        if (this.juageRoadDistance()) {\r\n                            if (this.player.transform.localPositionY < 0) {\r\n                                this.player.transform.localPositionY = 0;\r\n                            }\r\n                            this._moveArrivalPoint(this.outInfo.collider.owner);\r\n                        }\r\n                        break;\r\n                    case \"plank\":\r\n                    case \"Turn_45_L\":\r\n                    case \"Turn_45_R\":\r\n                    case \"Turn_45_short_L\":\r\n                    case \"Turn_45_short_R\":\r\n                        if (this.juageRoadDistance()) {\r\n                            this.changePlayerState(CharacterAnimation.Running);\r\n                            if (this.player.transform.localPositionY < 0) {\r\n                                this.player.transform.localPositionY = 0;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"plank_road\":\r\n                        if (this.juageBlankDistance(point)) {\r\n                            this.changePlayerState(CharacterAnimation.Running);\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    juageRoadDistance() {\r\n        return this.player.transform.localPositionY <= 0;\r\n    }\r\n    juageBlankDistance(point) {\r\n        let distance_y = this.player.transform.localPositionY - point.y;\r\n        return distance_y <= 0.05;\r\n    }\r\n    juageWaterDistance() {\r\n        return this.player.transform.localPositionY <= -2.3;\r\n    }\r\n    juageToArrival() {\r\n        if (this._toArrival) {\r\n            return;\r\n        }\r\n        if (this.cube_count > RandomUtil.RandomInteger(14, 18)) {\r\n            this._toArrival = true;\r\n            Laya.timer.once(1000, this, () => {\r\n                this._toArrival = false;\r\n            });\r\n        }\r\n    }\r\n    rayLeftCast() {\r\n        if (!this.physicsSimulation || !this.isRayCast) {\r\n            return false;\r\n        }\r\n        let pos = this._left.transform.position;\r\n        this.ray_left_orign.setValue(pos.x, pos.y, pos.z);\r\n        if (this.physicsSimulation.rayCast(this.ray_left_down, this.outInfo_left, 20)) {\r\n            let colliderName = this.outInfo_left.collider.owner.name;\r\n            switch (colliderName) {\r\n                case \"water\":\r\n                    return false;\r\n                case \"Turn_45_L\":\r\n                case \"Turn_45_R\":\r\n                case \"Turn_45_short_L\":\r\n                case \"Turn_45_short_R\":\r\n                case \"plank\":\r\n                case \"arrival\":\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    rayRigtCast() {\r\n        if (!this.physicsSimulation || !this.isRayCast) {\r\n            return false;\r\n        }\r\n        let pos = this._right.transform.position;\r\n        this.ray_right_orign.setValue(pos.x, pos.y, pos.z);\r\n        if (this.physicsSimulation.rayCast(this.ray_right_down, this.outInfo_right, 20)) {\r\n            let colliderName = this.outInfo_right.collider.owner.name;\r\n            switch (colliderName) {\r\n                case \"water\":\r\n                    return false;\r\n                case \"Turn_45_L\":\r\n                case \"Turn_45_R\":\r\n                case \"Turn_45_short_L\":\r\n                case \"Turn_45_short_R\":\r\n                case \"plank\":\r\n                case \"arrival\":\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    _rotateToRight() {\r\n        if (!this._part) {\r\n            return;\r\n        }\r\n        let part_up = new Laya.Vector3();\r\n        let enemy_forward = new Laya.Vector3();\r\n        this._part.transform.getUp(part_up);\r\n        part_up = part_up;\r\n        Laya.Vector3.scale(part_up, -1, part_up);\r\n        part_up = part_up;\r\n        this.player.transform.getForward(enemy_forward);\r\n        enemy_forward = enemy_forward;\r\n        let angle = Laya.Vector3.signedAngle(enemy_forward, part_up, Laya.Vector3.up);\r\n        let rad = angle * Math.PI / 180;\r\n        Laya.Quaternion.createFromAxisAngle(Laya.Vector3.up, rad, this.qua);\r\n        this.qua = this.qua;\r\n        this.player.transform.rotation = this.qua;\r\n    }\r\n    _moveForward() {\r\n        this.player.transform.translate(this.playerMove, true);\r\n    }\r\n    _decreaseDownspeed() {\r\n        return Laya.timer.delta / 1000 * 0.8;\r\n    }\r\n    _rotate(dir) {\r\n        this.playerRotate.setValue(0, -this._rotate_speed * dir * Laya.timer.delta / 1000, 0);\r\n        this.player.transform.rotate(this.playerRotate, true);\r\n    }\r\n    changePlayerState(state) {\r\n        if (this.animationState == state) {\r\n            return;\r\n        }\r\n        this._playAnimation(state);\r\n        switch (state) {\r\n            case CharacterAnimation.Planche:\r\n            case CharacterAnimation.Carrying:\r\n            case CharacterAnimation.Running:\r\n                this.playerMove.setValue(0, 0, this.forward_speed);\r\n                break;\r\n            case CharacterAnimation.Jump:\r\n                this.playerMove.setValue(0, this.down_speed, this.forward_speed);\r\n                break;\r\n            case CharacterAnimation.Idel:\r\n                this.playerMove.setValue(0, 0, 0);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    _playAnimation(state) {\r\n        this.animationState = state;\r\n        this.animator.play(state);\r\n    }\r\n    _addPlankToEnemy() {\r\n        this.cube_count++;\r\n        let pos = new Laya.Vector3();\r\n        if (this.cube_array.length > 0) {\r\n            let lastcube = this.cube_array[this.cube_array.length - 1];\r\n            pos.setValue(lastcube.transform.position.x, lastcube.transform.position.y + this.cube_height, lastcube.transform.position.z);\r\n        }\r\n        else {\r\n            pos = this.blank_point.transform.position.clone();\r\n        }\r\n        let cube = Pool.instance.getPlank_hand(this.blank_point, pos);\r\n        let animator = cube.getComponent(Laya.Animator);\r\n        animator.play(\"blank_push\");\r\n        let target_y = cube.transform.localPositionY + 0.2;\r\n        Laya.Tween.from(cube.transform, { localPositionY: target_y }, 0.6);\r\n        cube.transform.rotation = this.blank_point.transform.rotation;\r\n        this.cube_array.push(cube);\r\n        this.juageToArrival();\r\n    }\r\n    _popPlankToRoad() {\r\n        if (!this._canPop) {\r\n            return;\r\n        }\r\n        if (this.cube_array.length <= 0) {\r\n            return;\r\n        }\r\n        let cube = this.cube_array.pop();\r\n        this.cube_count--;\r\n        Pool.instance.reversePlankHandCube(cube);\r\n        let plankRoad = Pool.instance.getPlank_road(GameData.map, this.player.transform.position.clone());\r\n        plankRoad.transform.rotation = this.player.transform.rotation.clone();\r\n        plankRoad.transform.setWorldLossyScale(Laya.Vector3.one);\r\n        this._canPop = false;\r\n        Laya.timer.once(200, this, () => {\r\n            this._canPop = true;\r\n        });\r\n    }\r\n    _clearPlank() {\r\n        Laya.timer.frameLoop(1, this.player, () => {\r\n            if (this.cube_array.length <= 0) {\r\n                Laya.timer.clearAll(this.player);\r\n                return;\r\n            }\r\n            let cube = this.cube_array.pop();\r\n            this.cube_count--;\r\n            Pool.instance.reversePlankHandCube(cube);\r\n        });\r\n    }\r\n    _moveArrivalPoint(arrival) {\r\n        console.log(\"_moveArrivalPoint\");\r\n        if (this._isMoveArrival) {\r\n            return;\r\n        }\r\n        if (!arrival) {\r\n            return;\r\n        }\r\n        this._clearPlank();\r\n        this.changePlayerState(CharacterAnimation.Running);\r\n        let pos = GameData.getArrivalPos();\r\n        console.log(pos, \"final pos\");\r\n        this._isMoveArrival = true;\r\n        this._clearMoveTween();\r\n        this.charactor_tween.to(this.player.transform, { localPositionX: pos.x, localPositionZ: pos.z }, 1.5, null, this.moveArrivalpointHandler);\r\n    }\r\n    _clearMoveTween() {\r\n        this.charactor_tween.clear();\r\n    }\r\n    moveArrivalpointCallback() {\r\n        if (this._final) {\r\n            return;\r\n        }\r\n        this.playerInfo.rank = GameData.rank;\r\n        GameData.rank++;\r\n        this._final = true;\r\n        if (this.playerInfo.rank === 1) {\r\n            this.changePlayerState(CharacterAnimation.Dance);\r\n        }\r\n        else {\r\n            this.changePlayerState(CharacterAnimation.Defeated);\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Extensions/Quaternion.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/EffectUtil.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/EventManager.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/GameData.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/GameDefine.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/script/Singleton/Pool.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Util/RandomUtil.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Entity/Camera.ts",
    "D:/WorkSpace/Laya2.6.1/ShortcutRun/src/Entity/Charactor.ts"
  ]
}
